{"version":3,"file":"component---src-pages-404-js-4e08de2be38d5df51109.js","mappings":"0PAUMA,EAAU,CAAC,IAAK,IAAK,IAAK,IAAK,KAC/BC,EAAc,GAoNpB,SAASC,EAAyBC,GAChC,OAAOA,EAAKC,KAAKC,MAAMD,KAAKE,SAAWH,EAAKI,QAC9C,CAEA,SAASC,EAAuBC,EAAOC,GACrC,OAAOC,MAAMC,KAAKD,MAAMF,GAAOI,QAAQC,QACrC,SAAAC,GAAG,SAAAC,QAAAC,EAAAA,EAAAA,GAAQF,GAAG,CAAEb,EAAyBQ,IAAwB,GACjE,GAEJ,CAEA,UA7NgB,WACd,IAAMQ,GAAmBC,EAAAA,EAAAA,UACnBC,GAAYD,EAAAA,EAAAA,UACZE,GAAYF,EAAAA,EAAAA,UACZG,GAAYH,EAAAA,EAAAA,UACZI,GAAWJ,EAAAA,EAAAA,UAEjBK,GAAoCC,EAAAA,EAAAA,WAAS,GAAtCC,EAAUF,EAAA,GAAEG,EAAaH,EAAA,GAEhCI,GAA0BH,EAAAA,EAAAA,UAAS,GAADT,QAAAC,EAAAA,EAAAA,GAC7BT,EAAuBP,EAAgBD,IAAQ,CAClDE,EAAyBF,GACzB,IACAE,EAAyBF,MAJpB6B,EAAKD,EAAA,GAAEE,EAAQF,EAAA,GAMtBG,GAA0BN,EAAAA,EAAAA,UAAS,GAADT,QAAAC,EAAAA,EAAAA,GAC7BT,EAAuBP,EAAgBD,IAAQ,CAClDE,EAAyBF,GACzB,IACAE,EAAyBF,MAJpBgC,EAAKD,EAAA,GAAEE,EAAQF,EAAA,GAMtBG,GAA0BT,EAAAA,EAAAA,UAAS,GAADT,QAAAC,EAAAA,EAAAA,GAC7BT,EAAuBP,EAAgBD,IAAQ,CAClDE,EAAyBF,GACzB,IACAE,EAAyBF,MAJpBmC,EAAKD,EAAA,GAAEE,EAAQF,EAAA,IAQtBG,EAAAA,EAAAA,YAAU,WACRd,EAASe,QAAUC,EAAAA,EAAAA,SAAe,CAChCC,OAAQ,cACRC,SAAUC,EACVC,UAAU,IAGZpB,EAASe,QACNM,IAAI,CACHC,QAASzB,EAAUkB,QACnBQ,WAAY,QACZC,SAAU,KACVP,OAAQ,gBAETI,IACC,CACEC,QAASxB,EAAUiB,QACnBQ,WAAY,QACZC,SAAU,KACVP,OAAQ,eAEV,SAEDI,IACC,CACEC,QAASvB,EAAUgB,QACnBQ,WAAY,QACZC,SAAU,KACVP,OAAQ,eAEV,QAEN,GAAG,CAACX,EAAOG,EAAOG,KAElBE,EAAAA,EAAAA,YAAU,YACRE,EAAAA,EAAAA,GAAM,CACJM,QAAS3B,EAAiBoB,QAC1BS,SAAU,IACVC,QAAS,EACTR,OAAQ,gBACRC,SAAUQ,GAEd,GAAG,IAEH,IAAMA,EAAkB,WACtBtB,GAAc,GACdJ,EAASe,QAAQY,MACnB,EAEMR,EAAgB,WACpB,IAAMS,EAAgBtB,EAAM5B,IACtBmD,EAAgBpB,EAAM/B,IACtBoD,EAAgBlB,EAAMlC,IACVkD,IAAkBC,GAAiBD,IAAkBE,GAGrEd,EAAAA,EAAAA,GAAM,CACJM,QAASS,SAASC,KAClBR,SAAU,KACVS,UAAW,CACT,CAAEC,OAAQ,eAAgBC,gBAAiB,WAC3C,CAAED,OAAQ,aAAcC,gBAAiB,WACzC,CAAED,OAAQ,eAAgBC,gBAAiB,WAC3C,CAAED,OAAQ,aAAcC,gBAAiB,YAE3ClB,OAAQ,gBACRC,SAAQ,WACNa,SAASC,KAAKI,gBAAgB,SAC9BC,GACF,IAGFA,GAEJ,EAEMA,EAAY,WAChBjC,GAAc,GACdJ,EAASe,QAAQuB,KAAK,GAEtB/B,GAAS,SAAAD,GAAK,SAAAb,QAAAC,EAAAA,EAAAA,GACTY,EAAMiC,OAAO7D,EAAiBA,KAAYgB,EAAAA,EAAAA,GAC1CT,EAAuB,EAAGR,IAAQ,IAEvCiC,GAAS,SAAAD,GAAK,SAAAhB,QAAAC,EAAAA,EAAAA,GACTe,EAAM8B,OAAO7D,EAAiBA,KAAYgB,EAAAA,EAAAA,GAC1CT,EAAuB,EAAGR,IAAQ,IAEvCoC,GAAS,SAAAD,GAAK,SAAAnB,QAAAC,EAAAA,EAAAA,GACTkB,EAAM2B,OAAO7D,EAAiBA,KAAYgB,EAAAA,EAAAA,GAC1CT,EAAuB,EAAGR,IAAQ,GAEzC,EAEA,OACE+D,EAAAA,cAAAA,EAAAA,SAAA,KACEA,EAAAA,cAACC,EAAAA,EAAS,CAACC,MAAM,kBACjBF,EAAAA,cAACG,EAAAA,EAAkB,KACjBH,EAAAA,cAAA,WAASI,UAAU,+BACjBJ,EAAAA,cAACK,EAAAA,EAAmB,CAACD,UAAU,WAAWE,iBAAe,GACvDN,EAAAA,cAAA,OACEI,UAAU,qIACVG,IAAKpD,GAEL6C,EAAAA,cAAA,OAAKI,UAAU,0BACbJ,EAAAA,cAAA,OAAKI,UAAU,2BACbJ,EAAAA,cAAA,OAAKI,UAAU,+BACbJ,EAAAA,cAAA,OAAKI,UAAU,oBAAoBG,IAAKlD,GACrCS,EAAM0C,KAAI,SAACC,EAAQC,GAAK,OACvBV,EAAAA,cAAA,QACEW,IAAG,SAAWD,EACdN,UAAWQ,IACT,sFACA,CACE,aAAwB1E,KAAVwE,EACd,gCAA2CxE,KAAVwE,KAIpCD,EACI,MAKbT,EAAAA,cAAA,OAAKI,UAAU,+BACbJ,EAAAA,cAAA,OAAKI,UAAU,oBAAoBG,IAAKjD,GACrCW,EAAMuC,KAAI,SAACC,EAAQC,GAAK,OACvBV,EAAAA,cAAA,QACEW,IAAG,SAAWD,EACdN,UAAWQ,IACT,sFACA,CACE,aAAwB1E,KAAVwE,EACd,gCAA2CxE,KAAVwE,KAIpCD,EACI,MAKbT,EAAAA,cAAA,OAAKI,UAAU,+BACbJ,EAAAA,cAAA,OAAKI,UAAU,oBAAoBG,IAAKhD,GACrCa,EAAMoC,KAAI,SAACC,EAAQC,GAAK,OACvBV,EAAAA,cAAA,QACEW,IAAG,SAAWD,EACdN,UAAWQ,IACT,sFACA,CACE,aAAwB1E,KAAVwE,EACd,gCAA2CxE,KAAVwE,KAIpCD,EACI,QAMjBT,EAAAA,cAAA,OAAKI,UAAU,mDACbJ,EAAAA,cAACa,EAAAA,EAAQ,CAACC,SAAUnD,EAAYoD,QAAS7B,GAAiB,gBAG1Dc,EAAAA,cAAA,KAAGI,UAAU,eAAc,8CACkBJ,EAAAA,cAAA,WAAS,MACpDA,EAAAA,cAACgB,EAAAA,EAAiB,CAACC,KAAK,KAAI,QAAwB,2BAStE,C","sources":["webpack://thomas-rutzer-digital-home/./src/pages/404.js"],"sourcesContent":["import anime from \"animejs\"\r\nimport classnames from \"classnames\"\r\nimport React, { useEffect, useRef, useState } from \"react\"\r\n\r\nimport * as ContentWrapper from \"../components/contentWrapper\"\r\nimport HeadInfos from \"../components/headInfos\"\r\nimport * as InternalLink from \"../components/internalLink\"\r\nimport * as LayoutWrapper from \"../components/layoutWrapper\"\r\nimport * as Cta from \"./../components/cta\"\r\n\r\nconst symbols = [\"0\", \"1\", \"2\", \"3\", \"4\"]\r\nconst symbolCount = 12\r\n\r\nconst Page404 = () => {\r\n  const fadeContainerRef = useRef()\r\n  const slotLane1 = useRef()\r\n  const slotLane2 = useRef()\r\n  const slotLane3 = useRef()\r\n  const timeline = useRef()\r\n\r\n  const [isSpinning, setIsSpinning] = useState(false)\r\n\r\n  const [lane1, setLane1] = useState([\r\n    ...fillWithRandomElements(symbolCount -3, symbols),\r\n    getRandomElementFromList(symbols),\r\n    \"4\",\r\n    getRandomElementFromList(symbols),\r\n  ])\r\n  const [lane2, setLane2] = useState([\r\n    ...fillWithRandomElements(symbolCount -3, symbols),\r\n    getRandomElementFromList(symbols),\r\n    \"0\",\r\n    getRandomElementFromList(symbols),\r\n  ])\r\n  const [lane3, setLane3] = useState([\r\n    ...fillWithRandomElements(symbolCount -3, symbols),\r\n    getRandomElementFromList(symbols),\r\n    \"4\",\r\n    getRandomElementFromList(symbols),\r\n  ])\r\n\r\n\r\n  useEffect(() => {\r\n    timeline.current = anime.timeline({\r\n      easing: \"easeOutExpo\",\r\n      complete: onEndSpinning,\r\n      autoplay: false,\r\n    })\r\n\r\n    timeline.current\r\n      .add({\r\n        targets: slotLane1.current,\r\n        translateY: \"-300%\",\r\n        duration: 1600,\r\n        easing: \"easeOutSine\",\r\n      })\r\n      .add(\r\n        {\r\n          targets: slotLane2.current,\r\n          translateY: \"-300%\",\r\n          duration: 1600,\r\n          easing: \"easeOutSine\",\r\n        },\r\n        \"-=400\"\r\n      )\r\n      .add(\r\n        {\r\n          targets: slotLane3.current,\r\n          translateY: \"-300%\",\r\n          duration: 1600,\r\n          easing: \"easeOutSine\",\r\n        },\r\n        \"-=200\"\r\n      )\r\n  }, [lane1, lane2, lane3])\r\n\r\n  useEffect(() => {\r\n    anime({\r\n      targets: fadeContainerRef.current,\r\n      duration: 700,\r\n      opacity: 1,\r\n      easing: \"easeInOutQuad\",\r\n      complete: onStartSpinning,\r\n    })\r\n  }, [])\r\n\r\n  const onStartSpinning = () => {\r\n    setIsSpinning(true)\r\n    timeline.current.play()\r\n  }\r\n\r\n  const onEndSpinning = () => {\r\n    const lane1EndValue = lane1[symbolCount - 2]\r\n    const lane2EndValue = lane2[symbolCount - 2]\r\n    const lane3EndValue = lane3[symbolCount - 2]\r\n    const isJackpot = lane1EndValue === lane2EndValue && lane1EndValue === lane3EndValue\r\n\r\n    if (isJackpot) {\r\n      anime({\r\n        targets: document.body,\r\n        duration: 1200,\r\n        keyframes: [\r\n          { filter: \"invert(100%)\", backgroundColor: \"#f8f8f8\" },\r\n          { filter: \"invert(0%)\", backgroundColor: \"#2e2d2d\" },\r\n          { filter: \"invert(100%)\", backgroundColor: \"#f8f8f8\" },\r\n          { filter: \"invert(0%)\", backgroundColor: \"#2e2d2d\" },\r\n        ],\r\n        easing: \"easeInOutQuad\",\r\n        complete() {\r\n          document.body.removeAttribute(\"style\")\r\n          onRestart()\r\n        },\r\n      })\r\n    } else {\r\n      onRestart()\r\n    }\r\n  }\r\n\r\n  const onRestart = () => {\r\n    setIsSpinning(false)\r\n    timeline.current.seek(0)\r\n\r\n    setLane1(lane1 => [\r\n      ...lane1.splice(symbolCount - 3, symbolCount),\r\n      ...fillWithRandomElements(9, symbols),\r\n    ])\r\n    setLane2(lane2 => [\r\n      ...lane2.splice(symbolCount - 3, symbolCount),\r\n      ...fillWithRandomElements(9, symbols),\r\n    ])\r\n    setLane3(lane3 => [\r\n      ...lane3.splice(symbolCount - 3, symbolCount),\r\n      ...fillWithRandomElements(9, symbols),\r\n    ])\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <HeadInfos title=\"404 â€” Too bad\" />\r\n      <LayoutWrapper.Root>\r\n        <section className=\"bg-gradient-to-r from-black\">\r\n          <ContentWrapper.Root className=\"h-screen\" verticalSpacing>\r\n            <div\r\n              className=\"col-span-full grid grid-rows-[1fr_min-content] gap-3 md:gap-5 md:col-start-2 md:col-span-9 w-full h-full opacity-0 overflow-hidden\"\r\n              ref={fadeContainerRef}\r\n            >\r\n              <div className=\"h-full overflow-hidden\">\r\n                <div className=\"grid grid-cols-3 h-full\">\r\n                  <div className=\"slot h-full overflow-hidden\">\r\n                    <div className=\"slot__lane h-full\" ref={slotLane1}>\r\n                      {lane1.map((symbol, index) => (\r\n                        <span\r\n                          key={`lane1-${index}`}\r\n                          className={classnames(\r\n                            \"slot__symbol flex justify-center items-center h-2/6  transition-colors duration-700\",\r\n                            {\r\n                              \"text-white\": index === symbolCount - 2,\r\n                              \"text-stroke text-stroke-white\": index !== symbolCount - 2,\r\n                            }\r\n                          )}\r\n                        >\r\n                          {symbol}\r\n                        </span>\r\n                      ))}\r\n                    </div>\r\n                  </div>\r\n\r\n                  <div className=\"slot h-full overflow-hidden\">\r\n                    <div className=\"slot__lane h-full\" ref={slotLane2}>\r\n                      {lane2.map((symbol, index) => (\r\n                        <span\r\n                          key={`lane2-${index}`}\r\n                          className={classnames(\r\n                            \"slot__symbol flex justify-center items-center h-2/6  transition-colors duration-700\",\r\n                            {\r\n                              \"text-white\": index === symbolCount - 2,\r\n                              \"text-stroke text-stroke-white\": index !== symbolCount - 2,\r\n                            }\r\n                          )}\r\n                        >\r\n                          {symbol}\r\n                        </span>\r\n                      ))}\r\n                    </div>\r\n                  </div>\r\n\r\n                  <div className=\"slot h-full overflow-hidden\">\r\n                    <div className=\"slot__lane h-full\" ref={slotLane3}>\r\n                      {lane3.map((symbol, index) => (\r\n                        <span\r\n                          key={`lane3-${index}`}\r\n                          className={classnames(\r\n                            \"slot__symbol flex justify-center items-center h-2/6  transition-colors duration-700\",\r\n                            {\r\n                              \"text-white\": index === symbolCount - 2,\r\n                              \"text-stroke text-stroke-white\": index !== symbolCount - 2,\r\n                            }\r\n                          )}\r\n                        >\r\n                          {symbol}\r\n                        </span>\r\n                      ))}\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <div className=\"flex flex-col items-center justify-center gap-4\">\r\n                <Cta.Root disabled={isSpinning} onClick={onStartSpinning}>\r\n                  Spin to Win!\r\n                </Cta.Root>\r\n                <p className=\"text-center\">\r\n                  I couldn't find what you were looking for. <br></br>Go&nbsp;\r\n                  <InternalLink.Root link=\"/\">home</InternalLink.Root> or try your luck.\r\n                </p>\r\n              </div>\r\n            </div>\r\n          </ContentWrapper.Root>\r\n        </section>\r\n      </LayoutWrapper.Root>\r\n    </>\r\n  )\r\n}\r\n\r\nfunction getRandomElementFromList(list) {\r\n  return list[Math.floor(Math.random() * list.length)]\r\n}\r\n\r\nfunction fillWithRandomElements(count, randomElementCollection) {\r\n  return Array.from(Array(count).keys()).reduce(\r\n    acc => [...acc, getRandomElementFromList(randomElementCollection)],\r\n    []\r\n  )\r\n}\r\n\r\nexport default Page404\r\n"],"names":["symbols","symbolCount","getRandomElementFromList","list","Math","floor","random","length","fillWithRandomElements","count","randomElementCollection","Array","from","keys","reduce","acc","concat","_toConsumableArray","fadeContainerRef","useRef","slotLane1","slotLane2","slotLane3","timeline","_useState","useState","isSpinning","setIsSpinning","_useState2","lane1","setLane1","_useState3","lane2","setLane2","_useState4","lane3","setLane3","useEffect","current","anime","easing","complete","onEndSpinning","autoplay","add","targets","translateY","duration","opacity","onStartSpinning","play","lane1EndValue","lane2EndValue","lane3EndValue","document","body","keyframes","filter","backgroundColor","removeAttribute","onRestart","seek","splice","React","HeadInfos","title","LayoutWrapper","className","ContentWrapper","verticalSpacing","ref","map","symbol","index","key","classnames","Cta","disabled","onClick","InternalLink","link"],"sourceRoot":""}